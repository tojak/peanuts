@using Com.QueoFlow.Peanuts.Net.Core.Resources
@using Com.QueoFlow.Peanuts.Net.Web.Helper
@model Com.QueoFlow.Peanuts.Net.Web.Models.UserGroup.UserGroupMembersViewModel

@{
    ViewBag.Title = Model.UserGroup.Name;
    Layout = "~/Views/Shared/_LayoutSidebar.cshtml";
}

@section toolbar {
    <a class="btn btn-default" href="@Url.Action("AllMemberships", "UserGroup")">
        <span class="icon-arrow-left"></span>
        Zurück
    </a>
}

@section tabs {
    <ul class="nav nav-tabs" role="tablist">
        <li role="presentation">
            <a href="@Url.Action("MembershipDetails", new { userGroup = Model.UserGroup.BusinessId })" aria-controls="details" role="tab">
                Mitgliedschaft
            </a>
        </li>
        <li class="active" role="presentation">
            <a href="@Url.Action("Members", new { userGroup = Model.UserGroup.BusinessId })" aria-controls="details" role="tab">
                Mitglieder
            </a>
        </li>
        @if (Model.CurrentUsersMembershipInGroup != null) {
            <li role="presentation">
                <a href="@Url.Action("Account", new { userGroup = Model.CurrentUsersMembershipInGroup.UserGroup.BusinessId })" aria-controls="details" role="tab">
                    Konto
                </a>
            </li>
        }
        <li role="presentation">
            <a href="@Url.Action("Peanuts", new { userGroup = Model.UserGroup.BusinessId })" aria-controls="peanuts" role="tab">
                Peanuts
            </a>
        </li>
        <li role="presentation">
            <a href="@Url.Action("Statistics", new { userGroup = Model.UserGroup.BusinessId })" aria-controls="statistics" role="tab">
                Statistik
            </a>
        </li>
        @if (Model.UserGroupMembershipOptions.CanAdministrate) {
            <li role="presentation">
                <a href="@Url.Action("Administration", new { userGroup = Model.UserGroup.BusinessId })" aria-controls="administration" role="tab">
                    Administration
                </a>
            </li>
        }
    </ul>

}

<div class="form form-horizontal">

    <div class="nav-tabs-content tab-content">
        <div class="nav-tabs-panel tab-pane active" role="tabpanel" id="members">

            <fieldset>
                <legend class="form__legend pull-left">
                    Aktive Mitglieder der Gruppe
                    <a class="btn btn-default pull-right" href="@Url.Action("InviteForm", new { userGroup = Model.UserGroup.BusinessId })">
                        <span class="icon icon-user-plus"></span>
                        Nutzer einladen
                    </a>
                </legend>
                <div class="container-content--full">
                    @(
        Html.DisplayFor().GridFor(m => m.ActiveMembers, true)
            .Id("tbl_active_memebers")
            .ColumnFor(m => m.User.DisplayName, Resources_Domain.label_Com_QueoFlow_Peanuts_Net_Core_Domain_Users_User).OrderBy()
            .ColumnFor(m => m.Account.Balance, Resources_Domain.label_Com_QueoFlow_Peanuts_Net_Core_Domain_Accounting_Account_Balance).DisplayFormat("{0:C}").OrderBy(s => s.Account.Balance)
            .ColumnFor(m => m.CreatedAt, "Mitglied seit").OrderBy()
            .ColumnFor(m => m.MembershipType, Resources_Domain.label_Com_QueoFlow_Peanuts_Net_Core_Domain_Users_UserGroupMembership_MembershipType).OrderBy()
                          )
                </div>
            </fieldset>
            @if (Model.InactiveMembers.Any()) {
                <fieldset>
                    <legend class="form__legend pull-left">
                        Inaktive Mitglieder der Gruppe
                    </legend>
                    <div class="container-content--full">
                        @(
                    Html.DisplayFor().GridFor(m => m.InactiveMembers, true)
                        .Id("tbl_inactive_memebers")
                        .ColumnFor(m => m.User.DisplayName, Resources_Domain.label_Com_QueoFlow_Peanuts_Net_Core_Domain_Users_User).OrderBy()
                        .ColumnFor(m => m.Account.Balance, Resources_Domain.label_Com_QueoFlow_Peanuts_Net_Core_Domain_Accounting_Account_Balance).DisplayFormat("{0:C}").OrderBy(s => s.Account.Balance)
                        .ColumnFor(m => m.CreatedAt, "Mitglied seit").OrderBy()
                        .ColumnFor(m => m.MembershipType, Resources_Domain.label_Com_QueoFlow_Peanuts_Net_Core_Domain_Users_UserGroupMembership_MembershipType).OrderBy()
                              )
                    </div>
                </fieldset>
            }


            @if (Model.InvitedMembers.Any()) {
                <fieldset>
                    <legend class="form__legend pull-left">
                        Mitgliedschafts-Einladungen
                    </legend>
                    <div class="container-content--full">
                        @(
                    Html.DisplayFor().GridFor(m => m.InvitedMembers, true)
                        .Id("tbl_invited_memebers")
                        .ColumnFor(m => m.User.DisplayName, Resources_Domain.label_Com_QueoFlow_Peanuts_Net_Core_Domain_Users_User).OrderBy()
                        .ColumnFor(m => m.CreatedAt, "Eingeladen am").OrderBy()
                              )
                    </div>
                </fieldset>
            }

            @if (Model.RequestingMembers.Any()) {
                <fieldset>
                    <legend class="form__legend pull-left">
                        Mitgliedschafts-Anfragen
                    </legend>
                    <div class="container-content--full">
                        @(
                    Html.DisplayFor().GridFor(m => m.RequestingMembers, true)
                        .Id("tbl_requesting_memebers")
                        .ColumnFor(m => m.User.DisplayName, Resources_Domain.label_Com_QueoFlow_Peanuts_Net_Core_Domain_Users_User).OrderBy()
                        .ColumnFor(m => m.CreatedAt, "Angefragt am").OrderBy()
                              )
                    </div>
                </fieldset>
            }

            @if (Model.FormerUserGroupMembers.Any()) {
                <fieldset>
                    <legend class="form__legend pull-left">
                        Ehemalige Mitglieder
                    </legend>
                    <div class="container-content--full">
                        @(
                    Html.DisplayFor().GridFor(m => m.FormerUserGroupMembers, true)
                        .Id("tbl_former_memebers")
                        .ColumnFor(m => m.User.DisplayName, Resources_Domain.label_Com_QueoFlow_Peanuts_Net_Core_Domain_Users_User).OrderBy()
                        .ColumnFor(m => m.Account.Balance, Resources_Domain.label_Com_QueoFlow_Peanuts_Net_Core_Domain_Accounting_Account_Balance).DisplayFormat("{0:C}").OrderBy(s => s.Account.Balance)
                        .ColumnFor(m => m.CreatedAt, "Mitglied seit").OrderBy()
                        .ColumnFor(m => m, "Grund").Display("FormerMemberReason")
                              )
                    </div>
                </fieldset>
            }

        </div>
    </div>
</div>